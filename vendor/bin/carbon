#!/usr/bin/env php
<?php

/**
 * Proxy PHP file generated by Composer
 *
 * This file includes the referenced bin path (../nesbot/carbon/bin/carbon)
 * using a stream wrapper to prevent the shebang from being output on PHP<8
 *
 * @generated
 */

namespace Composer;

$GLOBALS['_composer_bin_dir'] = __DIR__;
$GLOBALS['_composer_autoload_path'] = __DIR__ . '/..' . '/autoload.php';

if (PHP_VERSION_ID < 80000) {
    if (!class_exists('Composer\BinProxyWrapper')) {
        /**
         * @internal
         */
        final class BinProxyWrapper
        {
            /**
             * @var
             */
            private $handle;
            /**
             * @var
             */
            private $position;
            /**
             * @var
             */
            private $realpath;

            /**
             * @param $path
             * @param $mode
             * @param $options
             * @param $opened_path
             * @return bool
             */
            public function stream_open($path, $mode, $options, &$opened_path): bool
            {
                // get rid of phpvfscomposer:// prefix for __FILE__ & __DIR__ resolution
                $opened_path = substr($path, 17);
                $this->realpath = realpath($opened_path) ?: $opened_path;
                $opened_path = $this->realpath;
                $this->handle = fopen($this->realpath, $mode);
                $this->position = 0;

                return (bool)$this->handle;
            }

            /**
             * @param $count
             * @return array|false|string|null
             */
            public function stream_read($count): array|false|string|null
            {
                $data = fread($this->handle, $count);

                if ($this->position === 0) {
                    $data = preg_replace('{^#!.*\r?\n}', '', $data);
                }

                $this->position += strlen($data);

                return $data;
            }

            /**
             * @param $castAs
             * @return mixed
             */
            public function stream_cast($castAs): mixed
            {
                return $this->handle;
            }

            /**
             * @return void
             */
            public function stream_close(): void
            {
                fclose($this->handle);
            }

            /**
             * @param $operation
             * @return bool
             */
            public function stream_lock($operation): bool
            {
                return !$operation || flock($this->handle, $operation);
            }

            /**
             * @param $offset
             * @param $whence
             * @return bool
             */
            public function stream_seek($offset, $whence): bool
            {
                if (0 === fseek($this->handle, $offset, $whence)) {
                    $this->position = ftell($this->handle);
                    return true;
                }

                return false;
            }

            /**
             * @return mixed
             */
            public function stream_tell(): mixed
            {
                return $this->position;
            }

            /**
             * @return bool
             */
            public function stream_eof(): bool
            {
                return feof($this->handle);
            }

            /**
             * @return array
             */
            public function stream_stat(): array
            {
                return array();
            }

            /**
             * @param $option
             * @param $arg1
             * @param $arg2
             * @return true
             */
            public function stream_set_option($option, $arg1, $arg2): true
            {
                return true;
            }

            /**
             * @param $path
             * @param $flags
             * @return array|false
             */
            public function url_stat($path, $flags): false|array
            {
                $path = substr($path, 17);
                if (file_exists($path)) {
                    return stat($path);
                }

                return false;
            }
        }
    }

    if (function_exists('stream_wrapper_register') && stream_wrapper_register('phpvfscomposer', 'Composer\BinProxyWrapper')) {
        include("phpvfscomposer://" . __DIR__ . '/..' . '/nesbot/carbon/bin/carbon');
        exit(0);
    }
}

include __DIR__ . '/..' . '/nesbot/carbon/bin/carbon';
